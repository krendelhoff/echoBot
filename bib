module Telegram.Log
  ( LogLevel(..)
  , writeLog
  , logSuccess
  , logError
  ) where

import           Data.Map               (Map)
import qualified Data.Map               as M
import           Data.Yaml
import           GHC.Generics

import           Telegram.Configuration
import qualified Telegram.ParseJSON     as PJ

data LogLevel
  = ERROR
  | WARN
  | ALL
  deriving (Show, Eq, Ord, Generic)

instance FromJSON LogLevel

writeLog :: LogLevel -> String -> IO ()
writeLog lvl text = appendFile "log.txt" $ show lvl ++ ":" ++ text ++ "\n"

logSuccess ::
     String -> PJ.Message -> StateT (Config, Map Int Int) (ExceptT String IO) ()
logSuccess mode m = do
  (lvl, rep) <- gets getter
  when
    (lvl >= ALL)
    (liftIO $
     writeLog ALL $
     "Successfully echoed " <> mode <> " " <> show rep <> " times")
  where
    getter (config, map) = (logMode config, rep)
      where
        rep = maybe (repeat $ config) id $ M.lookup (PJ.id $ PJ.chat $ m) map
